// # Functions # //

// # Mixins # //
@mixin font-size($delta: 1) {
    // no rems, too much work
    // $delta can be either a proper delta (i.e. a fractional value of the base font size) or a fixed size in px in which case it will calculate the proper delta against the base font size
    @if unitless($delta) {
        $delta: $delta;
    } @else {
        $delta: $delta / $base-font-size;
    }
    font-size: $delta * $base-font-size; 
    @include breakpoint(max-width $desktop) {
        font-size: $delta * $base-font-size * .9; 
    }
    @include breakpoint(max-width $mobile) {
        font-size: $delta * $base-font-size * .8; 
    }
}

@mixin vspace($delta: 1, $top: false) {
    margin-bottom: $vgutter * $delta;
    @if ($top) {
        margin-top: $vgutter * $delta;
    }
}
@mixin vpadding($delta: 1) {
    padding-bottom: $vgutter * $delta;
    padding-top: $vgutter * $delta;
}
@mixin hpadding($delta: 1) {
    padding-left: $vgutter * $delta;
    padding-right: $vgutter * $delta;
}
@mixin hspace($delta: 1) {
    margin-left: $hgutter * $delta;
    margin-right: $hgutter * $delta;
}
@mixin make-button($link: $gray-7) {
    background-color: $link;
    border: none;
    color: $white;
    display: inline-block;
    padding: ($vgutter/2) $hgutter;
    text-decoration: none;
    &:hover {
        opacity: 0.8;
        @include transition(all 0.2s ease-out);
        cursor: pointer;
    }
}
@mixin bigheader() {
    font-weight: $light-weight;
    line-height: 1;
    @include vspace(2, top);
}
@mixin mediumheader() {
    font-weight: $bold-weight;
    margin-bottom: 0;
}
@mixin weeheader() {
    font-weight: $normal-weight;
    margin-bottom: 0;
}

@mixin clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
}
@mixin color-selectors($map) {
    @each $name, $color in $map {
        .bg-#{$name} {
            background: $color;
        }
        .fg-#{$name} {
            color: $color;
        }
    }
}

// ## Temporary mixins to overload mixins missing from compass-mixins ## //

@mixin input-placeholder {
    // used in _base.scss
    // replaces compass/css/user-interface/input-placeholder()
    &::-webkit-input-placeholder    {
        @content;
    }
    &:-moz-placeholder {
        opacity: 1;
        @content;
    }
    &::-moz-placeholder {
        opacity: 1;
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}


// # Pseudoclasses # //
// Donâ€™t use pseudoclasses, use @mixins
